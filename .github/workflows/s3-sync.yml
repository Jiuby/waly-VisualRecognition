# .github/workflows/regen_embeddings.yml
name: Regenerar Embeddings

# ❶  Ejecuta cada día a las 02 AM Bogotá (07 UTC) y permite disparo manual
on:
  workflow_dispatch:

jobs:
  regen:
    runs-on: ubuntu-latest

    # ❷  Credenciales AWS como Secrets
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ secrets.AWS_REGION }}
      S3_BUCKET:             ${{ secrets.S3_BUCKET }}
      S3_KEY:                ${{ secrets.S3_KEY }}

    steps:
    # ──────────────────────────────────────────────────────────────
    # ❸  Obtiene el código
    # ──────────────────────────────────────────────────────────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ──────────────────────────────────────────────────────────────
    # ❹  Genera un .env temporal en la raíz del repo
    # ──────────────────────────────────────────────────────────────
    - name: Write .env for script
      run: |
        cat <<EOF > .env
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        AWS_REGION=${AWS_REGION}
        S3_BUCKET=${S3_BUCKET}
        S3_KEY=${S3_KEY}
        EOF
        echo "Contenido de .env generado:"
        cat .env

    # ──────────────────────────────────────────────────────────────
    # ❺  Instala Miniconda con Python 3.8.10
    # ──────────────────────────────────────────────────────────────
    - name: Set up Miniconda (Py 3.8.10)
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: "3.8.10"
        activate-environment: regen-env
        auto-activate-base: false

    # ──────────────────────────────────────────────────────────────
    # ❻  Dependencias (dlib, onnxruntime, insightface…)
    # ──────────────────────────────────────────────────────────────
    - name: Install dependencies
      run: |
        conda install -n regen-env -y -c conda-forge \
          dlib cmake boost-cpp onnxruntime \
          boto3 scikit-learn opencv tqdm jupyter nbconvert \
          django-environ
        # insightface vía pip (requiere onnxruntime ya instalado)
        conda run -n regen-env pip install insightface

    # ──────────────────────────────────────────────────────────────
    # ❼  Convierte el notebook a script
    # ──────────────────────────────────────────────────────────────
    - name: Convert entrenamiento_guardado.ipynb → .py
      run: |
        conda run -n regen-env jupyter nbconvert --to script \
          facialRecognition/entrenamiento_guardado.ipynb \
          --output entrenamiento_guardado \
          --output-dir facialRecognition

    # ──────────────────────────────────────────────────────────────
    # ❽  Ejecuta el script para regenerar embeddings
    # ──────────────────────────────────────────────────────────────
    - name: Run entrenamiento_guardado.py
      run: |
        conda run -n regen-env python facialRecognition/entrenamiento_guardado.py

    # ──────────────────────────────────────────────────────────────
    # ❾  Verifica el objeto en S3
    # ──────────────────────────────────────────────────────────────
    - name: Verify upload to S3
      run: |
        aws s3 ls s3://$S3_BUCKET/$S3_KEY
